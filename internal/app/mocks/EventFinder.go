// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	app "github.com/danmurf/time-tracker/internal/app"

	mock "github.com/stretchr/testify/mock"
)

// EventFinder is an autogenerated mock type for the EventFinder type
type EventFinder struct {
	mock.Mock
}

// LatestByName provides a mock function with given fields: ctx, taskName
func (_m *EventFinder) LatestByName(ctx context.Context, taskName string) (app.Event, error) {
	ret := _m.Called(ctx, taskName)

	var r0 app.Event
	if rf, ok := ret.Get(0).(func(context.Context, string) app.Event); ok {
		r0 = rf(ctx, taskName)
	} else {
		r0 = ret.Get(0).(app.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewEventFinderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventFinder creates a new instance of EventFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventFinder(t NewEventFinderT) *EventFinder {
	mock := &EventFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
